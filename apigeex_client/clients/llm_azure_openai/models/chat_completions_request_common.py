from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.chat_completions_request_common_logit_bias_type_0 import ChatCompletionsRequestCommonLogitBiasType0


T = TypeVar("T", bound="ChatCompletionsRequestCommon")


@_attrs_define
class ChatCompletionsRequestCommon:
    """
    Attributes:
        temperature (Union[None, Unset, float]): What sampling temperature to use, between 0 and 2. Higher values like
            0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            We generally recommend altering this or `top_p` but not both. Default: 1.0. Example: 1.
        top_p (Union[None, Unset, float]): An alternative to sampling with temperature, called nucleus sampling, where
            the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
            comprising the top 10% probability mass are considered.
            We generally recommend altering this or `temperature` but not both. Default: 1.0. Example: 1.
        stream (Union[None, Unset, bool]): If set, partial message deltas will be sent, like in ChatGPT. Tokens will be
            sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]`
            message. Default: False.
        stop (Union[None, Unset, list[str], str]): Up to 4 sequences where the API will stop generating further tokens.
        max_tokens (Union[Unset, int]): The maximum number of tokens allowed for the generated answer. By default, the
            number of tokens the model can return will be (4096 - prompt tokens). Default: 4096.
        presence_penalty (Union[Unset, float]): Number between -2.0 and 2.0. Positive values penalize new tokens based
            on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. Default:
            0.0.
        frequency_penalty (Union[Unset, float]): Number between -2.0 and 2.0. Positive values penalize new tokens based
            on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line
            verbatim. Default: 0.0.
        logit_bias (Union['ChatCompletionsRequestCommonLogitBiasType0', None, Unset]): Modify the likelihood of
            specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token
            ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the
            logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and
            1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or
            exclusive selection of the relevant token.
        user (Union[Unset, str]): A unique identifier representing your end-user, which can help Azure OpenAI to monitor
            and detect abuse. Example: user-1234.
    """

    temperature: Union[None, Unset, float] = 1.0
    top_p: Union[None, Unset, float] = 1.0
    stream: Union[None, Unset, bool] = False
    stop: Union[None, Unset, list[str], str] = UNSET
    max_tokens: Union[Unset, int] = 4096
    presence_penalty: Union[Unset, float] = 0.0
    frequency_penalty: Union[Unset, float] = 0.0
    logit_bias: Union["ChatCompletionsRequestCommonLogitBiasType0", None, Unset] = UNSET
    user: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        from ..models.chat_completions_request_common_logit_bias_type_0 import (
            ChatCompletionsRequestCommonLogitBiasType0,
        )

        temperature: Union[None, Unset, float]
        if isinstance(self.temperature, Unset):
            temperature = UNSET
        else:
            temperature = self.temperature

        top_p: Union[None, Unset, float]
        if isinstance(self.top_p, Unset):
            top_p = UNSET
        else:
            top_p = self.top_p

        stream: Union[None, Unset, bool]
        if isinstance(self.stream, Unset):
            stream = UNSET
        else:
            stream = self.stream

        stop: Union[None, Unset, list[str], str]
        if isinstance(self.stop, Unset):
            stop = UNSET
        elif isinstance(self.stop, list):
            stop = self.stop

        else:
            stop = self.stop

        max_tokens = self.max_tokens

        presence_penalty = self.presence_penalty

        frequency_penalty = self.frequency_penalty

        logit_bias: Union[None, Unset, dict[str, Any]]
        if isinstance(self.logit_bias, Unset):
            logit_bias = UNSET
        elif isinstance(self.logit_bias, ChatCompletionsRequestCommonLogitBiasType0):
            logit_bias = self.logit_bias.to_dict()
        else:
            logit_bias = self.logit_bias

        user = self.user

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if temperature is not UNSET:
            field_dict["temperature"] = temperature
        if top_p is not UNSET:
            field_dict["top_p"] = top_p
        if stream is not UNSET:
            field_dict["stream"] = stream
        if stop is not UNSET:
            field_dict["stop"] = stop
        if max_tokens is not UNSET:
            field_dict["max_tokens"] = max_tokens
        if presence_penalty is not UNSET:
            field_dict["presence_penalty"] = presence_penalty
        if frequency_penalty is not UNSET:
            field_dict["frequency_penalty"] = frequency_penalty
        if logit_bias is not UNSET:
            field_dict["logit_bias"] = logit_bias
        if user is not UNSET:
            field_dict["user"] = user

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.chat_completions_request_common_logit_bias_type_0 import (
            ChatCompletionsRequestCommonLogitBiasType0,
        )

        d = dict(src_dict)

        def _parse_temperature(data: object) -> Union[None, Unset, float]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, float], data)

        temperature = _parse_temperature(d.pop("temperature", UNSET))

        def _parse_top_p(data: object) -> Union[None, Unset, float]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, float], data)

        top_p = _parse_top_p(d.pop("top_p", UNSET))

        def _parse_stream(data: object) -> Union[None, Unset, bool]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, bool], data)

        stream = _parse_stream(d.pop("stream", UNSET))

        def _parse_stop(data: object) -> Union[None, Unset, list[str], str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                stop_type_1 = cast(list[str], data)

                return stop_type_1
            except:  # noqa: E722
                pass
            return cast(Union[None, Unset, list[str], str], data)

        stop = _parse_stop(d.pop("stop", UNSET))

        max_tokens = d.pop("max_tokens", UNSET)

        presence_penalty = d.pop("presence_penalty", UNSET)

        frequency_penalty = d.pop("frequency_penalty", UNSET)

        def _parse_logit_bias(data: object) -> Union["ChatCompletionsRequestCommonLogitBiasType0", None, Unset]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, dict):
                    raise TypeError()
                logit_bias_type_0 = ChatCompletionsRequestCommonLogitBiasType0.from_dict(data)

                return logit_bias_type_0
            except:  # noqa: E722
                pass
            return cast(Union["ChatCompletionsRequestCommonLogitBiasType0", None, Unset], data)

        logit_bias = _parse_logit_bias(d.pop("logit_bias", UNSET))

        user = d.pop("user", UNSET)

        chat_completions_request_common = cls(
            temperature=temperature,
            top_p=top_p,
            stream=stream,
            stop=stop,
            max_tokens=max_tokens,
            presence_penalty=presence_penalty,
            frequency_penalty=frequency_penalty,
            logit_bias=logit_bias,
            user=user,
        )

        chat_completions_request_common.additional_properties = d
        return chat_completions_request_common

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
