from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.chat_completion_response_message_role import ChatCompletionResponseMessageRole
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.chat_completion_response_message_function_call import ChatCompletionResponseMessageFunctionCall


T = TypeVar("T", bound="ChatCompletionResponseMessage")


@_attrs_define
class ChatCompletionResponseMessage:
    """
    Attributes:
        role (ChatCompletionResponseMessageRole): The role of the author of this message.
        content (Union[Unset, str]): The contents of the message.
        function_call (Union[Unset, ChatCompletionResponseMessageFunctionCall]): The name and arguments of a function
            that should be called, as generated by the model.
    """

    role: ChatCompletionResponseMessageRole
    content: Union[Unset, str] = UNSET
    function_call: Union[Unset, "ChatCompletionResponseMessageFunctionCall"] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        role = self.role.value

        content = self.content

        function_call: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.function_call, Unset):
            function_call = self.function_call.to_dict()

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "role": role,
            }
        )
        if content is not UNSET:
            field_dict["content"] = content
        if function_call is not UNSET:
            field_dict["function_call"] = function_call

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.chat_completion_response_message_function_call import ChatCompletionResponseMessageFunctionCall

        d = dict(src_dict)
        role = ChatCompletionResponseMessageRole(d.pop("role"))

        content = d.pop("content", UNSET)

        _function_call = d.pop("function_call", UNSET)
        function_call: Union[Unset, ChatCompletionResponseMessageFunctionCall]
        if isinstance(_function_call, Unset):
            function_call = UNSET
        else:
            function_call = ChatCompletionResponseMessageFunctionCall.from_dict(_function_call)

        chat_completion_response_message = cls(
            role=role,
            content=content,
            function_call=function_call,
        )

        chat_completion_response_message.additional_properties = d
        return chat_completion_response_message

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
